{"version":3,"sources":["components/Map.js","components/info.js","components/form.js","components/weather_info.js","components/historyWInfo.js","components/rectangleTable.js","App.js","reportWebVitals.js","index.js"],"names":["marker1","rect","currentLat","currentLng","Info","class","React","Component","Form","onSubmit","this","props","historyMethod","type","name","placeholder","Weather","city","lat","lng","country","temp","pressure","humidity","cloudiness","rain","snow","style_point","radius","stroke","weight","opacity","fillOpacity","className","MapCl","onClick","weatherMethod","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","MapConsumer","map","useMapEvents","click","e","remove","latlng","L","circleMarker","addTo","rectangle","addLayer","updateData","rectangleMethod","PastWeater","allmass","item","index","s","date","Date","setTime","day","getDate","month","getMonth","s_date","getFullYear","Rtable","gridtable","arr","deleteData","API_KEY","App","state","undefined","sunset","setState","getHistory","a","preventDefault","first","target","elements","fstdat","value","second","scndat","fetch","api_url","json","dataH","location","values","gettingWeather","data","main","sys","clouds","all","getRectangleWeather","x_min","y_min","x_max","y_max","shag_x","shag_y","x","y","coord","lon","deleteRectangleData","Map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d62c564.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MapContainer as LeafletMap, TileLayer, useMapEvents, MapConsumer } from 'react-leaflet';\r\nimport L from \"leaflet\";\r\n\r\n\r\nvar marker1, rect;\r\nvar currentLat, currentLng;\r\nvar style_point = {\r\n    radius: 5,\r\n    stroke:false,\r\n    weight: 1,\r\n    opacity: 1,\r\n    fillOpacity: 1,\r\n    className: \"style_point\"\r\n};\r\n\r\nclass MapCl extends React.Component {\r\n  render() {\r\n    return (\r\n      <form onClick={this.props.weatherMethod}>\r\n      <LeafletMap\r\n        center={[48.7071, 44.5170]}\r\n        zoom={6}\r\n        maxZoom={100}\r\n        attributionControl={true}\r\n        zoomControl={true}\r\n        doubleClickZoom={true}\r\n        scrollWheelZoom={true}\r\n        dragging={true}\r\n        animate={true}\r\n        easeLinearity={0.35}>\r\n        <TileLayer\r\n          url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n        />\r\n      <MapConsumer>\r\n      {() => {\r\n        const map = useMapEvents({\r\n          click: (e) => {\r\n            if (marker1) {\r\n              marker1.remove();\r\n              rect.remove();\r\n            }\r\n            const { lat, lng } = e.latlng;\r\n            currentLat = lat;\r\n            currentLng = lng;\r\n            marker1 = L.circleMarker([lat, lng], style_point).addTo(map);\r\n            rect = L.rectangle([[lat+1, lng+2], [lat-1, lng-2]]);\r\n            map.addLayer(rect);\r\n            this.props.updateData(currentLat, currentLng);\r\n          }\r\n        });\r\n        return null;\r\n      }}\r\n      </MapConsumer>\r\n      </LeafletMap>\r\n      <div class=\"rec_btn\"><button onClick={this.props.rectangleMethod}>Получить погоду в области прямоугольника</button></div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapCl;\r\n","import React from \"react\";\r\n\r\nclass Info extends React.Component {\r\n  render() {\r\n    return (\r\n      <div class=\"title_text\">\r\n        <h2>Погода</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return (\r\n      <div class=\"h_form\">\r\n        <form onSubmit={this.props.historyMethod}>\r\n        <h3>Запрос на историческую информацию:</h3>\r\n          From <input type=\"text\" name=\"fstdat\" placeholder=\"start YYYY-MM-DD\"/> to <input type=\"text\" name=\"scndat\" placeholder=\"end YYYY-MM-DD\"/>\r\n          <button>Получить погоду</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      { this.props.city &&\r\n        <div class=\"tek_weat\">\r\n          <h3>Центр прямоугольника:</h3>\r\n          <p>Местоположение: \"{this.props.lat}, {this.props.lng}\", {this.props.city}, {this.props.country}</p>\r\n          <p>Температура: {this.props.temp} Celsius</p>\r\n          <p>Давление: {this.props.pressure} hPa</p>\r\n          <p>Влажность: {this.props.humidity} %</p>\r\n          <p>Облачность: {this.props.cloudiness} %</p>\r\n          {this.props.rain &&\r\n            <p>Дождь: {this.props.rain['1h']} mm</p>\r\n          }\r\n          {this.props.snow &&\r\n            <p>Дождь: {this.props.snow['1h']} mm</p>\r\n          }\r\n        </div>\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nclass PastWeater extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      { this.props.allmass &&\r\n        <div class=\"h_weat\">\r\n        <h3>Исторические данные погоды:</h3>\r\n          <table  class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>cloudcover</th>\r\n              <th>humidity</th>\r\n              <th>temp</th>\r\n              <th>precip</th>\r\n              <th>date</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody>\r\n              {this.props.allmass.map((item, index) => {\r\n                var s = item['datetime'];\r\n                var date = new Date();\r\n                date.setTime(s);\r\n                var day = date.getDate();\r\n                var month = date.getMonth();\r\n                var year = date.getFullYear();\r\n                var s_date = year + '-' + (month+1) + '-' + day;\r\n                return <tr>\r\n                         <td>{index+1}</td>\r\n                         <td>{item['cloudcover']}</td>\r\n                         <td>{item['humidity']}</td>\r\n                         <td>{item['temp']}</td>\r\n                         <td>{item['precip']}</td>\r\n                         <td>{s_date}</td>\r\n                       </tr>;\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PastWeater;\r\n","import React from \"react\";\r\n\r\nclass Rtable extends React.Component {\r\n  render() {\r\n    if (this.props.gridtable) {\r\n      var arr=this.props.gridtable;\r\n    }\r\n    return (\r\n      <div>\r\n      { arr &&\r\n        <div>\r\n          <h3>Прямоугольник:</h3>\r\n          <table  class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>lat</th>\r\n              <th>lng</th>\r\n              <th>temp</th>\r\n              <th>city</th>\r\n              <th>country</th>\r\n              <th>pressure</th>\r\n              <th>humidity</th>\r\n              <th>cloudiness</th>\r\n              <th>rain</th>\r\n              <th>snow</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody>\r\n              {this.props.gridtable.map((item, index) => {\r\n                var rain, snow;\r\n                if (item['rain']) {\r\n                  rain = item['rain']['1h'];\r\n                }\r\n                else {\r\n                  rain = 0;\r\n                }\r\n                if (item['snow']) {\r\n                  snow = item['snow']['1h'];\r\n                }\r\n                else {\r\n                  snow = 0;\r\n                }\r\n                return <tr>\r\n                         <td>{index+1}</td>\r\n                         <td>{item['lat']}</td>\r\n                         <td>{item['lng']}</td>\r\n                         <td>{item['temp']}</td>\r\n                         <td>{item['city']}</td>\r\n                         <td>{item['country']}</td>\r\n                         <td>{item['pressure']}</td>\r\n                         <td>{item['humidity']}</td>\r\n                         <td>{item['cloudiness']}</td>\r\n                         <td>{rain}</td>\r\n                         <td>{snow}</td>\r\n                       </tr>;\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div class=\"rec_btn\"><button onClick={this.props.deleteData}>Очистить</button></div>\r\n        </div>\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rtable;\r\n","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather_info\";\nimport MapCl from \"./components/Map\";\nimport PastWeater from \"./components/historyWInfo\";\nimport Rtable from \"./components/rectangleTable\";\n\n\n\nconst API_KEY = \"7c148e8a668586d9b363e8463080992a\";\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    lat: undefined,\n    lng: undefined,\n    gridtable: []\n  }\n\n  updateData = (lat, lng) => {\n    this.setState({ lat: lat, lng: lng })\n  }\n\n  getHistory = async (e) => {\n    e.preventDefault();\n    var first = e.target.elements.fstdat.value;\n    var second = e.target.elements.scndat.value;\n\n    if (first && second && this.state.lat && this.state.lng) {\n      const api_url = await\n      fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?aggregateHours=24&combinationMethod=aggregate&startDateTime=${first}&endDateTime=${second}&maxStations=-1&maxDistance=-1&contentType=json&unitGroup=metric&locationMode=single&key=MSKAAAFWEE79X7RKT2JY5LL2V&dataElements=default&locations=${this.state.lat},${this.state.lng}`);\n      const dataH = await api_url.json();\n      this.setState({\n        allmass: dataH.location.values\n      });\n    }\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n\n    if(this.state.lat && this.state.lng) {\n      const api_url = await\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lng}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        humidity: data.main.humidity,\n        cloudiness: data.clouds.all,\n        rain: data.rain,\n        snow: data.snow\n      });\n    }\n  }\n\n  getRectangleWeather = async (e) => {\n    e.preventDefault();\n\n    if(this.state.lat && this.state.lng) {\n      var x_min=this.state.lat-1;\n      var y_min=this.state.lng-2;\n      var x_max=this.state.lat+1;\n      var y_max=this.state.lng+2;\n      var shag_x=(x_max-x_min)/6;\n      var shag_y=(y_max-y_min)/6;\n      var x,y;\n\n      for (x = x_min; x < x_max; x+=shag_x) {\n        for (y = y_min; y < y_max; y+=shag_y) {\n          const api_url = await\n          fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${x}&lon=${y}&appid=${API_KEY}&units=metric`);\n          const data = await api_url.json();\n          this.setState({\n            gridtable: [...this.state.gridtable,\n              {\n                lat: data.coord.lat,\n                lng: data.coord.lon,\n                temp: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                pressure: data.main.pressure,\n                humidity: data.main.humidity,\n                cloudiness: data.clouds.all,\n                rain: data.rain,\n                snow: data.snow\n              }]\n            })\n            //alert(JSON.stringify(this.state.gridtable, null, \"\\t\"));\n          }\n        }\n      }\n    }\n\n    deleteRectangleData = () => {\n      this.setState({\n        gridtable: []\n        })\n    }\n\n\n  render() {\n    return (\n      <div>\n        <Info />\n        <Weather\n          lat = {this.state.lat}\n          lng = {this.state.lng}\n          temp={this.state.temp}\n          city={this.state.city}\n          country={this.state.country}\n          pressure={this.state.pressure}\n          humidity={this.state.humidity}\n          cloudiness={this.state.cloudiness}\n          rain={this.state.rain}\n          snow={this.state.snow}\n        />\n        <MapCl updateData={this.updateData} weatherMethod={this.gettingWeather} rectangleMethod={this.getRectangleWeather}/>\n        <Rtable gridtable={this.state.gridtable} deleteData={this.deleteRectangleData}/>\n        <Form historyMethod={this.getHistory} />\n        <PastWeater allmass={this.state.allmass} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}